/*
 * Copyright 2014 Next Century Corporation
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import static com.ncc.neon.AcceptanceTestJSHelperGenerator.*
import org.apache.tools.ant.filters.ReplaceTokens
import com.ncc.common.GruntTask

apply plugin: 'groovy'

def TEST_GROUP = JavaBasePlugin.VERIFICATION_GROUP

sourceSets {
    acceptanceTest
}

configurations {
    acceptanceTestCompile { extendsFrom testCompile }
    acceptanceTestRuntime { extendsFrom testCompile, testRuntime }
}

task transformTestWebService(type: org.gradle.api.plugins.jetty.JettyRun) {
    description = "Launches a web service that performs a transform on data used for testing the transform functionality"
    dependsOn 'acceptanceTestClasses', 'generateAcceptanceTestHelpers'
    daemon = true
    httpPort = getAcceptanceTestServicePort()
    stopPort = httpPort + 2
    stopKey = 'stop'
    classpath = sourceSets.acceptanceTest.runtimeClasspath
    webXml = new File(sourceSets.acceptanceTest.output.resourcesDir, 'test-services-web.xml')
}

task acceptanceTestWar(type: org.gradle.api.plugins.jetty.JettyRunWar) {
    description = "Launches an instance of neon that acceptance tests are run against"
    dependsOn 'acceptanceTestClasses', 'generateAcceptanceTestHelpers'
    daemon = true
    httpPort = getAcceptanceTestPort()
    stopPort = httpPort + 2
    stopKey = 'stop'
    jettyConfig = new File(sourceSets.acceptanceTest.output.resourcesDir, 'jetty-config.xml')
    // the additionalRuntimeJars can be any file/folder, not just a jar file
    additionalRuntimeJars = [file('src/acceptanceTest/resources/additionalClasspath')]
}

task generateAcceptanceTestHelpers {
    description = "Generates a helper file that used for acceptance tests that contain common javascript values that can be used by the specs"
    // since the properties may change in the build file, always regenerate this file
    outputs.upToDateWhen { false }
    doLast {
        def outputDir = new File(buildDir, "acceptanceTestSupport")
        generateJavascriptHelper("http://localhost:${getAcceptanceTestPort()}/neon", "http://localhost:${getAcceptanceTestServicePort()}", "${getMongoHost()}", new File(outputDir, "testConfig.js"))
    }
}

def getAcceptanceTestPort() {
    return project.hasProperty("acceptanceTest.port") ? getProperty("acceptanceTest.port").toInteger() : 10002
}

// used for the transform service that runs as part of the acceptance test
def getAcceptanceTestServicePort() {
    // the test war runs on the acceptanceTestPort and the stop port is +2, so run the service on +4
    return getAcceptanceTestPort() + 4
}

task stopAcceptanceTestWar(type: org.gradle.api.plugins.jetty.JettyStop) {
    description = "Stops the instance of neon which acceptance tests are run against"
    stopPort = getAcceptanceTestPort() + 2
    stopKey = 'stop'
}

task stopTransformJetty(type: org.gradle.api.plugins.jetty.JettyStop) {
    description = "Stops the web service used for testing the transform service"
    stopPort = getAcceptanceTestServicePort() + 2
    stopKey = 'stop'
}

task insertMongoDataAcceptanceTest(type: com.ncc.neon.data.MongoDataInserter) {
    description = "Inserts acceptance test data into mongo"
    dependsOn 'deleteMongoDataAcceptanceTestBeforeInsert', 'generateMongoJson'
    host = getMongoHost()
    databaseName = 'acceptanceTest'
}
task deleteMongoDataAcceptanceTestBeforeInsert(type: com.ncc.neon.data.MongoDataDeleter) {
    description = "Deletes any old acceptance tests data in mongo that might have been left around by previous tests"
    host = getMongoHost()
    databaseName = 'acceptanceTest'
}

task deleteMongoDataAcceptanceTest(type: com.ncc.neon.data.MongoDataDeleter) {
    description = "Deletes the acceptance test data from mongo"
    host = getMongoHost()
    databaseName = 'acceptanceTest'
}

task afterAcceptanceTest {
    // Tasks that are used for "finalizedBy" are still shown in './gradlew tasks' (GRADLE-2949), so put it in the correct group
    group = TEST_GROUP
    description = "Cleans up after the acceptance test"
    dependsOn 'stopAcceptanceTestWar', 'stopTransformJetty', 'deleteMongoDataAcceptanceTest'
}

task acceptanceTest(type: GruntTask) {
    group = TEST_GROUP
    description = "Runs the neon acceptance test"
    dependsOn 'assemble', 'acceptanceTestWar', 'insertMongoDataAcceptanceTest', 'transformTestWebService'
    group = TEST_GROUP
    gruntArgs "jasmine:acceptance", "--outfile-base=${jsOutputFileBase}"

    // Run the acceptance tests with an in-memory Derby database so that there's no previous state
    doFirst {
        System.setProperty("derby.memoryOnly", "true")
    }
}

acceptanceTest.finalizedBy afterAcceptanceTest


