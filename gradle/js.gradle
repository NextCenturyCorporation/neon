/*
 * Copyright 2013 Next Century Corporation
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.taskdefs.condition.Os
import com.ncc.common.GruntTask

apply from: "${rootDir}/gradle/docsUtils.gradle"

project.ext {
    jsDocDir = "${project.docsDir}/jsdocs"
    jsSrcDir = 'src/main/javascript'
    jsLibDir = 'src/main/js-lib'
    jsOutputFolder = "${buildDir}/js"
    jsOutputFileBase = "${jsOutputFolder}/${project.name}"
    combinedJsFileName = "${jsOutputFileBase}.js"
    combinedNoDepsJsFileName = "${jsOutputFileBase}-nodeps.js"

    // where javascript/css dependencies from other projects are copied
    dependenciesDir = "${buildDir}/dependencies"
    jsDependenciesOutputDir = file("${dependenciesDir}/js")
    cssDependenciesOutputDir = file("${dependenciesDir}/css")
    imgDependenciesOutputDir = file("${dependenciesDir}/img")

    jsFiles = fileTree(jsSrcDir).include("**/*.js") +
            fileTree(jsLibDir).include("**/*.js") +
            fileTree(jsDependenciesOutputDir).include("**/*.js") +
            fileTree("src/test/javascript").include("**/*.js") +
            fileTree(rootProject.file("js-test-support")).include("**/*.js")

    npmExecutable = Os.isFamily(Os.FAMILY_WINDOWS) ? "npm.cmd" : "npm"
    yuidocExecutable = Os.isFamily(Os.FAMILY_WINDOWS) ? "yuidoc.cmd" : "yuidoc"
}

task gruntjs(type: GruntTask) {
    description = 'the default grunt task in Gruntfile.js'
    gruntArgs "--outfile-base=${jsOutputFileBase}"
}

task concatjs(type: GruntTask) {
    description = 'runs the grunt javascript concatenation task'
    gruntArgs "concat", "--outfile-base=${jsOutputFileBase}"
}

task watch(type: com.ncc.common.GruntTask) {
    description = "Wrapper around grunt's watch task to rebuild javascript files if any change"
    background = true
    gruntArgs "watch", "--outfile-base=${jsOutputFileBase}"
}

// ensure that javascript tasks are properly configured to run when
// they actually change. note: we don't just attach to all GruntTask types because the acceptance test is a
// bit different and it's not just dependent on javascript changes
['concatjs', 'gruntjs'].each { name ->
    project.getTasksByName(name, false).each { task ->
        task.inputs.files { jsFiles }
        task.outputs.files { 
            file(combinedJsFileName)
            file(combinedNoDepsJsFileName) 
        }
    }
}

task createPackageJson(type: Copy) {
    description = 'Creates a package.json file used by npm from a template that is shared by all projects'
    inputs.file "${rootDir}/package.json.template"
    outputs.file "${projectDir}/package.json"
    from rootDir
    into projectDir
    include "package.json.template"
    rename "package.json.template", "package.json"
    filter(ReplaceTokens, tokens: [
            "name": project.name,
            "version": project.version
    ])
}

task createTypingsJson(type: Copy) {
    description = 'Creates a typings.json file used by typings from a template that is shared by all projects'
    inputs.file "${rootDir}/typings.json.template"
    outputs.file "${projectDir}/typings.json"
    from rootDir
    into projectDir
    include "typings.json.template"
    rename "typings.json.template", "typings.json"
    filter(ReplaceTokens, tokens: [
            "name": project.name,
            "version": project.version
    ])
}

task installGruntDeps(type: Exec) {
    description  'Installs javascript dependencies using npm'
    inputs.file createPackageJson.outputs.files
    outputs.dir "${projectDir}/node_modules"
    commandLine npmExecutable, "install"
}

task jsDocs {
    description = 'Creates the javascript API documentation.'
    group = "Documentation"

    // replace the tokens in the yuidoc descriptor file
    doFirst {
        new File(jsDocDir).mkdirs()
        copy {
            includeEmptyDirs = false
            from("${rootDir}/yuidoc") {
                include('**/*.json')
                // replace the tokens in the yuidoc file and put it in a temp dir so the yuidoc task can access it.
                // this file is not part of the final docs output
                filter(ReplaceTokens, tokens: [
                        projectDir: projectDir.absolutePath,
                        libraryName: libraryName.toString(),
                        outDir: jsDocDir.toString().replace("\\", "/")
                ]
                )
            }
            into temporaryDir
        }
    }
    doLast {
        def baseArgs = ["${projectDir}/node_modules/.bin/${yuidocExecutable}", "-c", "$temporaryDir/yuidoc.json"]

        // first validate the docs tags
        exec { commandLine(baseArgs + "--lint") }

        // then create the docs
        exec { commandLine baseArgs }

        // copy the images after the yuidoc tasks runs because the yuidoc task will delete the output directory
        // these files are needed for the final docs output since they will be referenced in the html output
        copy {
            from("${rootDir}/yuidoc") {
                include('images/*')
            }
            into jsDocDir
        }
    }
}

task copyJsDocs(type: org.gradle.api.tasks.Copy) {
    description = 'Copies the javascript documentation to a directory to be zipped'
    dependsOn 'jsDocs'
    copyDocsIntoZipDir('javascript-api-docs', libraryName, copyJsDocs, jsDocDir)
}

task zipJsDocs(type: Zip) {
    description = 'Creates a zip file containing the javascript API documentation'
    group = 'documentation'
    dependsOn 'copyJsDocs'
    zipDocs(copyJsDocs, zipJsDocs, project.buildDir)
}

// yuidoc will look in src/main/javascript for the js files
[jsDocs, copyJsDocs, zipJsDocs]*.onlyIf {
    project.file(jsSrcDir).exists()
}

project.war.dependsOn 'gruntjs'

project.tasks.withType(GruntTask) { task ->
    // use the locally installed grunt
    task.doFirst {
        task.executable = "${projectDir}/node_modules/.bin/${GruntTask.GRUNT_EXECUTABLE}"
    }

    task.dependsOn([installGruntDeps])
}
